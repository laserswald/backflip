#! /bin/sh

# full screen to monitor
# usage: fsm <mon> <windowid>

usage () {
    echo "usage: $(basename $0) <disp> <wid>"
    exit 0
}

# Set the window given to full screen.
# usage: set_full <monitor> <window>
set_full () {
    local monitor=$1
    local window=$2
    wattr xywhi $window >$tempfile
    chwb -s 0 $window
    wtp $(dattr $monitor) $window
    wtf $window
    chwso -r $window
}

# unsset the window given to full screen.
# usage: set_full <monitor> <window>
unset_full () {
    wtp $(cat ${tempfile})
    rm -f ${tempfile}
}

same_window() {
    local stored_wid=$(cat $tempfile | cut -f5 -d' ')
    [[ "$1" = "$stored_wid" ]] && return 0
    return 1
}

#Did the window get resized another way?
check_moved() {
    local window=$1

    local recorded=$(cat $tempfile | cut -f '1-4' -d' ')
    local current=$(wattr xywh $window)

    if [ "$current" = "$recorded" ]; then
        return 1
    else
        return 0
    fi
}

display=$1
windowid=$2
tempfile="/tmp/fs_data_$display"

# All them checks.
test -z "$1" && test -z "$2" && usage

# check if display is valid
lsd | grep -q $display || usage

# check if windowid is valid
lsw | grep -q $windowid || usage

if [ -f $tempfile ]; then
    if same_window $windowid; then
        if check_moved $windowid; then
            rm -f $tempfile
            set_full $display $windowid
        else
            unset_full
        fi
    else
        unset_full
        set_full $display $windowid
    fi
else
    set_full $display $windowid
fi

